// Code generated by MockGen. DO NOT EDIT.
// Source: ./match.go

// Package domain is a generated GoMock package.
package domain

import (
	domain "awesomeProject/DoomParser/cmd/parser/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMatchUsecase is a mock of MatchUsecase interface.
type MockMatchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMatchUsecaseMockRecorder
}

// MockMatchUsecaseMockRecorder is the mock recorder for MockMatchUsecase.
type MockMatchUsecaseMockRecorder struct {
	mock *MockMatchUsecase
}

// NewMockMatchUsecase creates a new mock instance.
func NewMockMatchUsecase(ctrl *gomock.Controller) *MockMatchUsecase {
	mock := &MockMatchUsecase{ctrl: ctrl}
	mock.recorder = &MockMatchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchUsecase) EXPECT() *MockMatchUsecaseMockRecorder {
	return m.recorder
}

// ParseKills mocks base method.
func (m *MockMatchUsecase) ParseKills(match domain.Match) (domain.Kills, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseKills", match)
	ret0, _ := ret[0].(domain.Kills)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseKills indicates an expected call of ParseKills.
func (mr *MockMatchUsecaseMockRecorder) ParseKills(match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseKills", reflect.TypeOf((*MockMatchUsecase)(nil).ParseKills), match)
}

// SplitByMatch mocks base method.
func (m *MockMatchUsecase) SplitByMatch(arg0 []string) ([]domain.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitByMatch", arg0)
	ret0, _ := ret[0].([]domain.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitByMatch indicates an expected call of SplitByMatch.
func (mr *MockMatchUsecaseMockRecorder) SplitByMatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitByMatch", reflect.TypeOf((*MockMatchUsecase)(nil).SplitByMatch), arg0)
}
